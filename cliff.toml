# git-cliff ~ customized configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = """
# Changelog\n
This document contains a list of notable changes for world-preview.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/caeruleusDraconis/world-preview" }, # replace repository URL
  { pattern = '\[(NEW|FIX|INT|DOC|REF|REFACTOR)]', replace = "" }, # replace our commit tags
]
[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = false
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '(\(|\[)(\w+\s)?#([0-9]+)(\)|\])', replace = "[[#${3}]](<REPO>/issues/${3})"}, # replace issue numbers
  { pattern = '^(.*)(\n.*)+', replace = "${1}\n" }, # only include the first line of a commit
  { pattern = '.*(CHANGE:).*', replace = "**${1}**" }, # bold changes
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^\\[NEW]", group = "‚ú® Features" }, # New features, including changes
  { message = "^\\[FIX]", group = "üêõ Bug Fixes" }, # Bugfixes
  { message = "^\\[DOC]", group = "üìù Documentation" }, # Documentation changes
  { message = "^\\[(INT|REF|REFACTOR)]", group = "üîß Refactor" }, # Internal workings
  { message = "^[ ]*[A-Za-z0-9]+", group = "üóÉÔ∏è Miscellaneous" }, # Anything that is not matched before
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"

# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
